<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>日记</title>
    <url>/2021/%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="92c9ef25acfdb6d44faeae53390e25133cfb0cfdf84aa2ed3cbe84e0bd3c13cc"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>测试记录</title>
    <url>/2021/Markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2FuZ3hpbjM3L3AvODE4NTY4OC5odG1s">https://www.cnblogs.com/wangxin37/p/8185688.html<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="单行公式"><a href="#单行公式" class="headerlink" title="单行公式"></a>单行公式</h4><p>$RMSE = 1 - \dfrac{\sum_{i=1}^n (y_i - \hat{y}_i)^2} {\sum_{i=1}^n (y_i - \bar{y})^2}$</p>
<span id="more"></span>
<h4 id="行内公式"><a href="#行内公式" class="headerlink" title="行内公式"></a>行内公式</h4><p>当 $ a \ne 0 $ 时, 对于这个方程 $(ax^2 + bx + c = 0)$ 有两个答案，分别是：</p>
<script type="math/tex; mode=display">x = {-b \pm \sqrt{b^2-4ac} \over 2a}.</script><h4 id="大括号右多行赋值"><a href="#大括号右多行赋值" class="headerlink" title="大括号右多行赋值"></a>大括号右多行赋值</h4><script type="math/tex; mode=display">
f(n) =
\begin{cases}
n/2,  & \text{if $n$ is even} \\
3n+1, & \text{if $n$ is odd}
\end{cases}</script><h4 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h4><script type="math/tex; mode=display">\begin{bmatrix}
{a_{11}}&{a_{12}}&{\cdots}&{a_{1n}}\\
{a_{21}}&{a_{22}}&{\cdots}&{a_{2n}}\\
{\vdots}&{\vdots}&{\ddots}&{\vdots}\\
{a_{m1}}&{a_{m2}}&{\cdots}&{a_{mn}}\\
\end{bmatrix}</script><h4 id="多行公式对齐，标号-begin-split"><a href="#多行公式对齐，标号-begin-split" class="headerlink" title="多行公式对齐，标号 \begin{split}"></a>多行公式对齐，标号 \begin{split}</h4><script type="math/tex; mode=display">
\begin{equation}
\begin{split}
\frac{\partial^2 f}{\partial{x^2}} &= \frac{\partial(\Delta_x f(i,j))}{\partial x} = \frac{\partial(f(i+1,j)-f(i,j))}{\partial x} \\
&= \frac{\partial f(i+1,j)}{\partial x} - \frac{\partial f(i,j)}{\partial x} \\
&= f(i+2,j) -2f(f+1,j) + f(i,j)
\end{split}
\end{equation}</script><h4 id="这个不编号，加个-nonumber"><a href="#这个不编号，加个-nonumber" class="headerlink" title="这个不编号，加个 \nonumber"></a>这个不编号，加个 \nonumber</h4><script type="math/tex; mode=display">
\begin{eqnarray}
\beta^*(D) = \mathop{argmin} \limits_{\beta} \lambda {||\beta||}^2 + \sum_{i=1}^n max(0, 1 - y_i f_{\beta}(x_i))
\nonumber
\end{eqnarray}</script><h4 id="公式自动编号-开头标号-begin-equation-或-begin-eqnarray"><a href="#公式自动编号-开头标号-begin-equation-或-begin-eqnarray" class="headerlink" title="公式自动编号,开头标号 \begin{equation} 或 \begin{eqnarray}"></a>公式自动编号,开头标号 \begin{equation} 或 \begin{eqnarray}</h4><script type="math/tex; mode=display">
\begin{eqnarray}
\sum_{i=0}^n F_i \cdot \phi (H, p_i) - \sum_{i=1}^n a_i \cdot ( \tilde{x_i}, \tilde{y_i}) + b_i \cdot ( \tilde{x_i}^2 , \tilde{y_i}^2 )
\end{eqnarray}</script><script type="math/tex; mode=display">
\begin{eqnarray}
\beta^*(D) = \mathop{argmin} \limits_{\beta} \lambda {||\beta||}^2 + \sum_{i=1}^n max(0, 1 - y_i f_{\beta}(x_i))
\end{eqnarray}</script><h4 id="公式手动编号"><a href="#公式手动编号" class="headerlink" title="公式手动编号"></a>公式手动编号</h4><script type="math/tex; mode=display">
\begin{equation}
\sum_{i=0}^n F_i \cdot \phi (H, p_i) - \sum_{i=1}^n a_i \cdot ( \tilde{x_i}, \tilde{y_i}) + b_i \cdot ( \tilde{x_i}^2 , \tilde{y_i}^2 ) \tag{1.2.3}
\end{equation}</script><h3 id="程序块"><a href="#程序块" class="headerlink" title="程序块"></a>程序块</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Hello,World&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><div class="table-container">
<table>
<thead>
<tr>
<th>name</th>
<th style="text-align:center">111</th>
<th style="text-align:center">222</th>
<th style="text-align:center">333</th>
<th style="text-align:right">444</th>
</tr>
</thead>
<tbody>
<tr>
<td>aaa</td>
<td style="text-align:center">bbb</td>
<td style="text-align:center">ccc</td>
<td style="text-align:center">ddd</td>
<td style="text-align:right">eee</td>
</tr>
<tr>
<td>fff</td>
<td style="text-align:center">ggg</td>
<td style="text-align:center">hhh</td>
<td style="text-align:center">iii</td>
<td style="text-align:right">000</td>
</tr>
</tbody>
</table>
</div>
<h3 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h3><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><div style="float:none;clear:both;">
下文其他内容
</div>

<div style="float:left;border:solid 1px 888888;margin:2px;"><img src="https://gitee.com/atan2021/pic/raw/master/20210905_GPS.jpg" alt='GPS模块' width="200"/></div>

<div style="float:left;border:solid 1px 888888;margin:2px;"><img src="https://gitee.com/atan2021/pic/raw/master/20210905_GPStianxian.jpg" alt='GPS天线'  height="296"/></div>

<div style="float:none;clear:both;">
下文其他内容
</div>

<table>
    <tr>
        <td ><center><img src="https://gitee.com/atan2021/pic/raw/master/20210905_GPS.jpg" >图1  新垣结衣1 </center></td>
        <td ><center><img src="https://gitee.com/atan2021/pic/raw/master/20210905_GPStianxian.jpg"  >图2 新垣结衣1</center></td>
    </tr>

    <tr>
        <td><center><img src="https://gitee.com/atan2021/pic/raw/master/20210905_GPStianxian.jpg"  >图3 新垣结衣2</center></td>
        <td ><center><img src="https://gitee.com/atan2021/pic/raw/master/20210905_GPS.jpg"  >图4 新垣结衣2</center> </td>
    </tr>
</table>

<h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><p>用反引号<br>这里 <code>printf</code> 可以</p>
<h3 id="raw"><a href="#raw" class="headerlink" title="raw"></a>raw</h3>
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
body {font-family: Arial;}

/* Style the tab */
.tab {
  overflow: hidden;
  border: 1px solid #ccc;
  background-color: #f1f1f1;
}

/* Style the buttons inside the tab */
.tab button {
  background-color: inherit;
  float: left;
  border: none;
  outline: none;
  cursor: pointer;
  padding: 14px 16px;
  transition: 0.3s;
  font-size: 17px;
}

/* Change background color of buttons on hover */
.tab button:hover {
  background-color: #ddd;
}

/* Create an active/current tablink class */
.tab button.active {
  background-color: #ccc;
}

/* Style the tab content */
.tabcontent {
  display: none;
  padding: 6px 12px;
  border: 1px solid #ccc;
  border-top: none;
}
</style>

<p>Tabs</p>
<p>Click on the buttons inside the tabbed menu:</p>

<div class="tab">
  <button class="tablinks" onclick="openCity(event, 'London')">London</button>
  <button class="tablinks" onclick="openCity(event, 'Paris')">Paris</button>
  <button class="tablinks" onclick="openCity(event, 'Tokyo')">Tokyo</button>
  <button class="tablinks" onclick="openCity(event, 'Tokyo2')">Tokyo2</button>
</div>

<div id="London" class="tabcontent">
  <p>London</p>
  <p>London is the capital city of England.</p>
</div>

<div id="Paris" class="tabcontent">
  <h3>Paris</h3>
  <p>Paris is the capital of France.</p> 
</div>

<div id="Tokyo" class="tabcontent">
  <p>Tokyo</p>
  <p>123</p>
</div>

<div id="Tokyo2" class="tabcontent">
  <p>Tokyo2</p>
</div>

<script>
function openCity(evt, cityName) {
  var i, tabcontent, tablinks;
  tabcontent = document.getElementsByClassName("tabcontent");
  for (i = 0; i < tabcontent.length; i++) {
    tabcontent[i].style.display = "none";
  }
  tablinks = document.getElementsByClassName("tablinks");
  for (i = 0; i < tablinks.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(" active", "");
  }
  document.getElementById(cityName).style.display = "block";
  evt.currentTarget.className += " active";
}
</script>

]]></content>
      <categories>
        <category>Markdown语法测试</category>
      </categories>
      <tags>
        <tag>Markdown语法测试</tag>
      </tags>
  </entry>
  <entry>
    <title>记录</title>
    <url>/2021/%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9a0ac91e2f71e05b34b39ac5343b89c73da083b87693e244716612afdada99b2"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>ARS展览项目（七）——C++多线程：Socket+表情识别整合</title>
    <url>/2021/ARS%E5%B1%95%E8%A7%88%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%83%EF%BC%89%E2%80%94%E2%80%94C-%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9ASocket-%E8%A1%A8%E6%83%85%E8%AF%86%E5%88%AB%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<h1 id="说明一下"><a href="#说明一下" class="headerlink" title="说明一下"></a>说明一下</h1><p>我这边做表情识别和Socket，表情识别要实时，Socket要一直监听表情识别的结果，那么就只好用C++多线程来解决这个“两个功能一直并且同时运行”的问题。</p>
<p>否则，如果是单线程的话，只能运行表情识别一段时间，切换发送一段时间，又切换回来，这样没有多线程好。<br><span id="more"></span></p>
<h1 id="还要说解决的难点"><a href="#还要说解决的难点" class="headerlink" title="还要说解决的难点"></a>还要说解决的难点</h1><ol>
<li>写成多个文件，是由于命名空间的原因，不是多线程的原因——因为多线程是可以写在一个文件里面的</li>
<li>如果多线程写在一个文件，那么参数传递进函数就很方便了，但是现在不同函数却写在不同文件里</li>
<li>为了解决第2点的问题，定义了全局变量<code>b_int</code>，在别的文件里用<code>extern</code>来声明，全局变量哈哈哈哈哈，然后问题就解决了。用全局变量来做传递的参数，在不同的文件里面都可以用。</li>
</ol>
<h2 id="新建1-h-作为头文件"><a href="#新建1-h-作为头文件" class="headerlink" title="新建1.h 作为头文件"></a>新建1.h 作为头文件</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> XXX_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_H</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aaa</span><span class="params">(<span class="keyword">int</span> ax)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">aaa2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h2 id="新建1-cpp-Socket的代码"><a href="#新建1-cpp-Socket的代码" class="headerlink" title="新建1.cpp Socket的代码"></a>新建1.cpp Socket的代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#include &quot;pch.h&quot;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;1.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;winsock.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialization</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> b_int;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aaa</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//定义长度变量</span></span><br><span class="line">	<span class="keyword">int</span> send_len = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> recv_len = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//定义发送缓冲区和接受缓冲区</span></span><br><span class="line">	<span class="keyword">char</span> send_buf[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">char</span> recv_buf[<span class="number">100</span>];</span><br><span class="line">	<span class="comment">//定义服务端套接字，接受请求套接字</span></span><br><span class="line">	SOCKET s_server;</span><br><span class="line">	SOCKET s_accept;</span><br><span class="line">	<span class="comment">//服务端地址客户端地址</span></span><br><span class="line">	SOCKADDR_IN server_addr;</span><br><span class="line">	SOCKADDR_IN accept_addr;</span><br><span class="line">	<span class="built_in">initialization</span>();</span><br><span class="line">	<span class="comment">//填充服务端信息</span></span><br><span class="line">	server_addr.sin_family = AF_INET;</span><br><span class="line">	server_addr.sin_addr.S_un.S_addr = <span class="built_in">htonl</span>(INADDR_ANY);</span><br><span class="line">	server_addr.sin_port = <span class="built_in">htons</span>(<span class="number">5010</span>);</span><br><span class="line">	<span class="comment">//创建套接字</span></span><br><span class="line">	s_server = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">bind</span>(s_server, (SOCKADDR *)&amp;server_addr, <span class="built_in"><span class="keyword">sizeof</span></span>(SOCKADDR)) == SOCKET_ERROR) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;套接字绑定失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">WSACleanup</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;套接字绑定成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//设置套接字为监听状态</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">listen</span>(s_server, SOMAXCONN) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;设置监听状态失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">WSACleanup</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;设置监听状态成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;服务端正在监听连接，请稍候....&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//接受连接请求</span></span><br><span class="line">	len = <span class="built_in"><span class="keyword">sizeof</span></span>(SOCKADDR);</span><br><span class="line">	s_accept = <span class="built_in">accept</span>(s_server, (SOCKADDR *)&amp;accept_addr, &amp;len);</span><br><span class="line">	<span class="keyword">if</span> (s_accept == SOCKET_ERROR) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;连接失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">WSACleanup</span>();</span><br><span class="line">		<span class="comment">//return 0;</span></span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;连接建立，准备接受数据&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		a = b_int;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			a = b_int;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (a == <span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				send_buf[<span class="number">0</span>] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">				send_buf[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">				a = b_int;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">2</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				send_buf[<span class="number">0</span>] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">				send_buf[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">				a = b_int;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">3</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				send_buf[<span class="number">0</span>] = <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">				send_buf[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">				a = b_int;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">4</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				send_buf[<span class="number">0</span>] = <span class="string">&#x27;4&#x27;</span>;</span><br><span class="line">				send_buf[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">				a = b_int;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;b_int=&quot;</span> &lt;&lt; b_int &lt;&lt; endl;</span><br><span class="line">			a = b_int;</span><br><span class="line"></span><br><span class="line">			recv_len = <span class="built_in">recv</span>(s_accept, recv_buf, <span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;recv= &quot;</span> &lt;&lt; recv_buf &lt;&lt; endl;</span><br><span class="line">			a = b_int;</span><br><span class="line"></span><br><span class="line">			<span class="built_in">send</span>(s_accept, send_buf, <span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;send= &quot;</span> &lt;&lt; send_buf &lt;&lt; endl;</span><br><span class="line">			a = b_int;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//关闭套接字</span></span><br><span class="line">	<span class="built_in">closesocket</span>(s_server);</span><br><span class="line">	<span class="built_in">closesocket</span>(s_accept);</span><br><span class="line">	<span class="comment">//释放DLL资源</span></span><br><span class="line">	<span class="built_in">WSACleanup</span>();</span><br><span class="line">	<span class="comment">//return 0;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialization</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//初始化套接字库</span></span><br><span class="line">	WORD w_req = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);<span class="comment">//版本号</span></span><br><span class="line">	WSADATA wsadata;</span><br><span class="line">	<span class="keyword">int</span> err;</span><br><span class="line">	err = <span class="built_in">WSAStartup</span>(w_req, &amp;wsadata);</span><br><span class="line">	<span class="keyword">if</span> (err != <span class="number">0</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;初始化套接字库失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;初始化套接字库成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//检测版本号</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">LOBYTE</span>(wsadata.wVersion) != <span class="number">2</span> || <span class="built_in">HIBYTE</span>(wsadata.wHighVersion) != <span class="number">2</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;套接字库版本号不符！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">WSACleanup</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;套接字库版本正确！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//填充服务端地址信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="新建2-cpp-表情识别的代码"><a href="#新建2-cpp-表情识别的代码" class="headerlink" title="新建2.cpp 表情识别的代码"></a>新建2.cpp 表情识别的代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#pragma comment(linker, &quot;/subsystem:windows /entry:mainCRTStartup&quot;)//去除CMD窗口</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlib/opencv.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlib/image_processing/frontal_face_detector.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlib/image_processing/render_face_detections.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlib/image_processing.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlib/gui_widgets.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> dlib;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv::ml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> b_int;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">aaa2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function">cv::VideoCapture <span class="title">cap</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">		<span class="keyword">if</span> (!cap.<span class="built_in">isOpened</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			cerr &lt;&lt; <span class="string">&quot;Unable to connect to camera&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//image_window win;  </span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// Load face detection and pose estimation models.  </span></span><br><span class="line">		frontal_face_detector detector = <span class="built_in">get_frontal_face_detector</span>();</span><br><span class="line">		shape_predictor pose_model;</span><br><span class="line">		<span class="built_in">deserialize</span>(<span class="string">&quot;shape_predictor_68_face_landmarks.dat&quot;</span>) &gt;&gt; pose_model;</span><br><span class="line"></span><br><span class="line">		cv::Ptr&lt;SVM&gt; svm = StatModel::load&lt;SVM&gt;(<span class="string">&quot;SVM_DATA.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Grab and process frames until the main window is closed by the user.  </span></span><br><span class="line">		<span class="keyword">while</span> (cv::<span class="built_in">waitKey</span>(<span class="number">30</span>) != <span class="number">27</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// Grab a frame  </span></span><br><span class="line">			cv::Mat temp;</span><br><span class="line">			cap &gt;&gt; temp;</span><br><span class="line"></span><br><span class="line">			<span class="function">cv_image&lt;bgr_pixel&gt; <span class="title">cimg</span><span class="params">(temp)</span></span>;</span><br><span class="line">			<span class="comment">// Detect faces   </span></span><br><span class="line">			std::vector&lt;rectangle&gt; faces = <span class="built_in">detector</span>(cimg);</span><br><span class="line">			<span class="comment">// Find the pose of each face.  </span></span><br><span class="line">			std::vector&lt;full_object_detection&gt; shapes;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">long</span> i = <span class="number">0</span>; i &lt; faces.<span class="built_in">size</span>(); ++i)</span><br><span class="line">				shapes.<span class="built_in">push_back</span>(<span class="built_in">pose_model</span>(cimg, faces[i]));</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (!shapes.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">				<span class="keyword">float</span> testData[<span class="number">1</span>][<span class="number">136</span>];</span><br><span class="line">				<span class="keyword">float</span> 系数 = -(faces[<span class="number">0</span>].<span class="built_in">top</span>() - faces[<span class="number">0</span>].<span class="built_in">bottom</span>()) / <span class="number">300.0</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">68</span>; i++) &#123;</span><br><span class="line">					<span class="built_in">circle</span>(temp, <span class="built_in">cvPoint</span>(shapes[<span class="number">0</span>].<span class="built_in">part</span>(i).<span class="built_in">x</span>(), shapes[<span class="number">0</span>].<span class="built_in">part</span>(i).<span class="built_in">y</span>()), <span class="number">2</span>, cv::<span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">-1</span>);</span><br><span class="line">					testData[<span class="number">0</span>][i * <span class="number">2</span>] = (shapes[<span class="number">0</span>].<span class="built_in">part</span>(i).<span class="built_in">x</span>() - faces[<span class="number">0</span>].<span class="built_in">left</span>()) / 系数;</span><br><span class="line">					testData[<span class="number">0</span>][i * <span class="number">2</span> + <span class="number">1</span>] = (shapes[<span class="number">0</span>].<span class="built_in">part</span>(i).<span class="built_in">y</span>() - faces[<span class="number">0</span>].<span class="built_in">top</span>()) / 系数;</span><br><span class="line">					<span class="comment">//  shapes[0].part(i).x();//68个  </span></span><br><span class="line">				&#125;</span><br><span class="line">				cv::Mat 结果;</span><br><span class="line"></span><br><span class="line">				<span class="function">cv::Mat <span class="title">query</span><span class="params">(<span class="number">1</span>, <span class="number">136</span>, CV_32FC1, testData)</span></span>;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (svm-&gt;<span class="built_in">predict</span>(query) == <span class="number">250</span>) &#123;</span><br><span class="line">					cv::<span class="built_in">putText</span>(temp, <span class="string">&quot;Happy&quot;</span>, cv::<span class="built_in">Point</span>(<span class="number">20</span>, <span class="number">60</span>), <span class="number">3</span>, <span class="number">2</span>, <span class="built_in">cvScalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">					<span class="comment">//cout &lt;&lt; &quot;高兴&quot; &lt;&lt; endl; </span></span><br><span class="line">					b_int = <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (svm-&gt;<span class="built_in">predict</span>(query) == <span class="number">170</span>) &#123;</span><br><span class="line">					cv::<span class="built_in">putText</span>(temp, <span class="string">&quot;Common&quot;</span>, cv::<span class="built_in">Point</span>(<span class="number">20</span>, <span class="number">60</span>), <span class="number">3</span>, <span class="number">2</span>, <span class="built_in">cvScalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">					<span class="comment">//cout &lt;&lt; &quot;平静&quot; &lt;&lt; endl; </span></span><br><span class="line">					b_int = <span class="number">2</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (svm-&gt;<span class="built_in">predict</span>(query) == <span class="number">300</span>) &#123;</span><br><span class="line">					cv::<span class="built_in">putText</span>(temp, <span class="string">&quot;Disgust&quot;</span>, cv::<span class="built_in">Point</span>(<span class="number">20</span>, <span class="number">60</span>), <span class="number">3</span>, <span class="number">2</span>, <span class="built_in">cvScalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">					<span class="comment">//cout &lt;&lt; &quot;厌恶&quot; &lt;&lt; endl; </span></span><br><span class="line">					b_int = <span class="number">3</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//	cout&lt;&lt;	svm-&gt;predict(query)&lt;&lt;endl;</span></span><br><span class="line">				<span class="comment">//	cout &lt;&lt; 结果 &lt;&lt; endl;</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//Display it all on the screen  </span></span><br><span class="line">			<span class="built_in">imshow</span>(<span class="string">&quot;表情识别      ESC退出&quot;</span>, temp);</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in"><span class="keyword">catch</span></span> (serialization_error&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;You need dlib&#x27;s default face landmarking model file to run this example.&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;You can get it from the following URL: &quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;   http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; endl &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in"><span class="keyword">catch</span></span> (exception&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="新建test-cpp-main-函数"><a href="#新建test-cpp-main-函数" class="headerlink" title="新建test.cpp main()函数"></a>新建test.cpp main()函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;1.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b_int ;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">aaa</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ccc = <span class="number">2</span> ;</span><br><span class="line"></span><br><span class="line">	<span class="function">std::thread <span class="title">t</span><span class="params">(aaa, b_int)</span></span>;</span><br><span class="line">	<span class="function">std::thread <span class="title">t2</span><span class="params">(aaa2)</span></span>;</span><br><span class="line">	t.<span class="built_in">join</span>();</span><br><span class="line">	t2.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ARS项目</category>
      </categories>
      <tags>
        <tag>ARS项目</tag>
      </tags>
  </entry>
  <entry>
    <title>ARS展览项目（六）——Socket通信</title>
    <url>/2021/ARS%E5%B1%95%E8%A7%88%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94Socket%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h1 id="本篇前提说明"><a href="#本篇前提说明" class="headerlink" title="本篇前提说明"></a>本篇前提说明</h1><p>因为我这边做的是表情识别，另外一边做的是贪吃蛇的动作。贪吃蛇的食物就是我的表情，所以要把两者的数据连接起来。</p>
<p>贪吃蛇用JAVA来做，我用C++，然后两者可以用Socket来进行数据连接。设计时候是贪吃蛇用客户端，<strong>我这边是服务端</strong>。</p>
<p>本项目在该文档的基础上修改，<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3OTIzMDQxL2FydGljbGUvZGV0YWlscy84Mzg1Nzk2NA==">https://blog.csdn.net/qq_27923041/article/details/83857964<i class="fa fa-external-link-alt"></i></span>，谢谢这位作者的帮助。<br><span id="more"></span></p>
<h1 id="先放上代码"><a href="#先放上代码" class="headerlink" title="先放上代码"></a>先放上代码</h1><h2 id="服务端的代码-Server端"><a href="#服务端的代码-Server端" class="headerlink" title="服务端的代码(Server端)"></a>服务端的代码(Server端)</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#include &quot;pch.h&quot;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;winsock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialization</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//定义长度变量</span></span><br><span class="line">	<span class="keyword">int</span> send_len = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> recv_len = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//定义发送缓冲区和接受缓冲区</span></span><br><span class="line">	<span class="keyword">char</span> send_buf[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">char</span> recv_buf[<span class="number">100</span>];</span><br><span class="line">	<span class="comment">//定义服务端套接字，接受请求套接字</span></span><br><span class="line">	SOCKET s_server;</span><br><span class="line">	SOCKET s_accept;</span><br><span class="line">	<span class="comment">//服务端地址客户端地址</span></span><br><span class="line">	SOCKADDR_IN server_addr;</span><br><span class="line">	SOCKADDR_IN accept_addr;</span><br><span class="line">	<span class="built_in">initialization</span>();</span><br><span class="line">	<span class="comment">//填充服务端信息</span></span><br><span class="line">	server_addr.sin_family = AF_INET;</span><br><span class="line">	server_addr.sin_addr.S_un.S_addr = <span class="built_in">htonl</span>(INADDR_ANY);</span><br><span class="line">	server_addr.sin_port = <span class="built_in">htons</span>(<span class="number">5010</span>);</span><br><span class="line">	<span class="comment">//创建套接字</span></span><br><span class="line">	s_server = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">bind</span>(s_server, (SOCKADDR *)&amp;server_addr, <span class="built_in"><span class="keyword">sizeof</span></span>(SOCKADDR)) == SOCKET_ERROR) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;套接字绑定失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">WSACleanup</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;套接字绑定成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//设置套接字为监听状态</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">listen</span>(s_server, SOMAXCONN) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;设置监听状态失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">WSACleanup</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;设置监听状态成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;服务端正在监听连接，请稍候....&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//接受连接请求</span></span><br><span class="line">	len = <span class="built_in"><span class="keyword">sizeof</span></span>(SOCKADDR);</span><br><span class="line">	s_accept = <span class="built_in">accept</span>(s_server, (SOCKADDR *)&amp;accept_addr, &amp;len);</span><br><span class="line">	<span class="keyword">if</span> (s_accept == SOCKET_ERROR) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;连接失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">WSACleanup</span>();</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;连接建立，准备接受数据&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//接收数据</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		recv_len = <span class="built_in">recv</span>(s_accept, recv_buf, <span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span> (recv_len &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;接受失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;客户端信息:&quot;</span> &lt;&lt; recv_buf &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;请输入回复信息:&quot;</span>;</span><br><span class="line">		cin &gt;&gt; send_buf;</span><br><span class="line">		send_len = <span class="built_in">send</span>(s_accept, send_buf, <span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span> (send_len &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;发送失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//关闭套接字</span></span><br><span class="line">	<span class="built_in">closesocket</span>(s_server);</span><br><span class="line">	<span class="built_in">closesocket</span>(s_accept);</span><br><span class="line">	<span class="comment">//释放DLL资源</span></span><br><span class="line">	<span class="built_in">WSACleanup</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialization</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//初始化套接字库</span></span><br><span class="line">	WORD w_req = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);<span class="comment">//版本号</span></span><br><span class="line">	WSADATA wsadata;</span><br><span class="line">	<span class="keyword">int</span> err;</span><br><span class="line">	err = <span class="built_in">WSAStartup</span>(w_req, &amp;wsadata);</span><br><span class="line">	<span class="keyword">if</span> (err != <span class="number">0</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;初始化套接字库失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;初始化套接字库成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//检测版本号</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">LOBYTE</span>(wsadata.wVersion) != <span class="number">2</span> || <span class="built_in">HIBYTE</span>(wsadata.wHighVersion) != <span class="number">2</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;套接字库版本号不符！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">WSACleanup</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;套接字库版本正确！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//填充服务端地址信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="客户端代码-CLient端）"><a href="#客户端代码-CLient端）" class="headerlink" title="客户端代码(CLient端）"></a>客户端代码(CLient端）</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#include &quot;pch.h&quot;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;winsock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialization</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//定义长度变量</span></span><br><span class="line">	<span class="keyword">int</span> send_len = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> recv_len = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//定义发送缓冲区和接受缓冲区</span></span><br><span class="line">	<span class="keyword">char</span> send_buf[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">char</span> recv_buf[<span class="number">100</span>];</span><br><span class="line">	<span class="comment">//定义服务端套接字，接受请求套接字</span></span><br><span class="line">	SOCKET s_server;</span><br><span class="line">	<span class="comment">//服务端地址客户端地址</span></span><br><span class="line">	SOCKADDR_IN server_addr;</span><br><span class="line">	<span class="built_in">initialization</span>();</span><br><span class="line">	<span class="comment">//填充服务端信息</span></span><br><span class="line">	server_addr.sin_family = AF_INET;</span><br><span class="line">	server_addr.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">	server_addr.sin_port = <span class="built_in">htons</span>(<span class="number">5010</span>);</span><br><span class="line">	<span class="comment">//创建套接字</span></span><br><span class="line">	s_server = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">connect</span>(s_server, (SOCKADDR *)&amp;server_addr, <span class="built_in"><span class="keyword">sizeof</span></span>(SOCKADDR)) == SOCKET_ERROR) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;服务器连接失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">WSACleanup</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;服务器连接成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">//发送,接收数据</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;请输入发送信息:&quot;</span>;</span><br><span class="line">		cin &gt;&gt; send_buf;</span><br><span class="line">		send_len = <span class="built_in">send</span>(s_server, send_buf, <span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span> (send_len &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;发送失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		recv_len = <span class="built_in">recv</span>(s_server, recv_buf, <span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span> (recv_len &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;接受失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;服务端信息:&quot;</span> &lt;&lt; recv_buf &lt;&lt; endl;</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//关闭套接字</span></span><br><span class="line">	<span class="built_in">closesocket</span>(s_server);</span><br><span class="line">	<span class="comment">//释放DLL资源</span></span><br><span class="line">	<span class="built_in">WSACleanup</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialization</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//初始化套接字库</span></span><br><span class="line">	WORD w_req = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);<span class="comment">//版本号</span></span><br><span class="line">	WSADATA wsadata;</span><br><span class="line">	<span class="keyword">int</span> err;</span><br><span class="line">	err = <span class="built_in">WSAStartup</span>(w_req, &amp;wsadata);</span><br><span class="line">	<span class="keyword">if</span> (err != <span class="number">0</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;初始化套接字库失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;初始化套接字库成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//检测版本号</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">LOBYTE</span>(wsadata.wVersion) != <span class="number">2</span> || <span class="built_in">HIBYTE</span>(wsadata.wHighVersion) != <span class="number">2</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;套接字库版本号不符！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">WSACleanup</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;套接字库版本正确！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//填充服务端地址信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>因为我这边做的是表情识别，另外一边做的是贪吃蛇的动作。贪吃蛇的食物就是我的表情，所以要把两者的数据连接起来。</p>
<p>贪吃蛇用JAVA来做，我用C++，然后两者可以用Socket来进行数据连接。设计时候是贪吃蛇用客户端，<strong>我这边是服务端</strong>。</p>
<p>设计了:</p>
<style>
table th:nth-of-type(1) {width: 200px;}
th:nth-of-type(2) {width: 200px;}
table {margin-left: auto; margin-right: auto}
</style>

<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">发送数据</th>
<th style="text-align:center">代表表情</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">开心(happy)</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">平常(common)</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">厌恶(disgust)</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">生气(angry)</td>
</tr>
</tbody>
</table>
</div>
<p>这里之所以放客户端的代码，我是拿来测试服务端改得好不好的，所以整个项目过程中我都没有改过客户端的代码，生成一个exe就可以一直用。</p>
<p>程序直接新建一个C++空项目，导入opencv和dlib属性表，加入cpp源文件就可以用。建立两个项目，一个服务端，一个客户端。</p>
<h1 id="解决的一个难点"><a href="#解决的一个难点" class="headerlink" title="解决的一个难点"></a>解决的一个难点</h1><p>Socket通信的问题容易解决，让它改成自动发送数据也好解决，但是整合的时候发现！！Socket加入opencv或dlib的库编译时，会无法建立监听。</p>
<p>后来一步步排除原因，有计算机的同学帮忙，发现是socket和opencv与dlib的命名空间发生了冲突，就是<code>using namespace stu;</code>不正常。</p>
<p>于是计算机的同学想到一个很好的方法，把Socket写在不同文件中，再写一个头文件来引用，那么两者的命名空间便不会冲突，因为是不同的cpp文件，如下：</p>
<h2 id="新建一个头文件-1-h"><a href="#新建一个头文件-1-h" class="headerlink" title="新建一个头文件 1.h"></a>新建一个头文件 1.h</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> XXX_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_H</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aaa</span><span class="params">(<span class="keyword">int</span> ax)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h2 id="新建一个1-cpp-拿来放Socket的代码"><a href="#新建一个1-cpp-拿来放Socket的代码" class="headerlink" title="新建一个1.cpp 拿来放Socket的代码"></a>新建一个1.cpp 拿来放Socket的代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;1.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;winsock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialization</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> b_int;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aaa</span><span class="params">(<span class="keyword">int</span> a)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	a = b_int;</span><br><span class="line">	<span class="comment">//定义长度变量</span></span><br><span class="line">	<span class="keyword">int</span> send_len = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> recv_len = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//定义发送缓冲区和接受缓冲区</span></span><br><span class="line">	<span class="keyword">char</span> send_buf[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">char</span> recv_buf[<span class="number">100</span>];</span><br><span class="line">	<span class="comment">//定义服务端套接字，接受请求套接字</span></span><br><span class="line">	SOCKET s_server;</span><br><span class="line">	SOCKET s_accept;</span><br><span class="line">	<span class="comment">//服务端地址客户端地址</span></span><br><span class="line">	SOCKADDR_IN server_addr;</span><br><span class="line">	SOCKADDR_IN accept_addr;</span><br><span class="line">	<span class="built_in">initialization</span>();</span><br><span class="line">	<span class="comment">//填充服务端信息</span></span><br><span class="line">	server_addr.sin_family = AF_INET;</span><br><span class="line">	server_addr.sin_addr.S_un.S_addr = <span class="built_in">htonl</span>(INADDR_ANY);</span><br><span class="line">	server_addr.sin_port = <span class="built_in">htons</span>(<span class="number">5010</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建套接字</span></span><br><span class="line">	s_server = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">bind</span>(s_server, (SOCKADDR *)&amp;server_addr, <span class="built_in"><span class="keyword">sizeof</span></span>(SOCKADDR));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置套接字为监听状态</span></span><br><span class="line">	<span class="built_in">listen</span>(s_server, SOMAXCONN);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//接受连接请求</span></span><br><span class="line">	len = <span class="built_in"><span class="keyword">sizeof</span></span>(SOCKADDR);</span><br><span class="line">	s_accept = <span class="built_in">accept</span>(s_server, (SOCKADDR *)&amp;accept_addr, &amp;len);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//接收数据</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (a == <span class="number">1</span>) </span><br><span class="line">		&#123;</span><br><span class="line">			send_buf[<span class="number">0</span>] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">			send_buf[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			send_buf[<span class="number">0</span>] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">			send_buf[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">3</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			send_buf[<span class="number">0</span>] = <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">			send_buf[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">4</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			send_buf[<span class="number">0</span>] = <span class="string">&#x27;4&#x27;</span>;</span><br><span class="line">			send_buf[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		send_len = <span class="built_in">send</span>(s_accept, send_buf, <span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialization</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//初始化套接字库</span></span><br><span class="line">	WORD w_req = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);<span class="comment">//版本号</span></span><br><span class="line">	WSADATA wsadata;</span><br><span class="line">	<span class="keyword">int</span> err;</span><br><span class="line">	err = <span class="built_in">WSAStartup</span>(w_req, &amp;wsadata);</span><br><span class="line">	<span class="keyword">if</span> (err != <span class="number">0</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;初始化套接字库失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;初始化套接字库成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//检测版本号</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">LOBYTE</span>(wsadata.wVersion) != <span class="number">2</span> || <span class="built_in">HIBYTE</span>(wsadata.wHighVersion) != <span class="number">2</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;套接字库版本号不符！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">WSACleanup</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;套接字库版本正确！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//填充服务端地址信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="新建一个2-cpp-拿来放main-函数"><a href="#新建一个2-cpp-拿来放main-函数" class="headerlink" title="新建一个2.cpp 拿来放main()函数"></a>新建一个2.cpp 拿来放main()函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;1.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b_int = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">aaa</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ccc = <span class="number">2</span> ;</span><br><span class="line">	b_int = ccc;</span><br><span class="line">	<span class="function">std::thread <span class="title">t</span><span class="params">(aaa, b_int)</span></span>;</span><br><span class="line">	t.<span class="built_in">join</span>();</span><br><span class="line">	<span class="comment">//aaa(b_int);</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt;b_int &lt;&lt;endl ;</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，<code>std::thread t(aaa, b_int);t.join();</code>是多线程的动作，会在下一篇文章解释。<code>#include &lt;thread&gt;</code>是多线程的头文件。</p>
<p>在这里，多文件和写库就可以了。</p>
]]></content>
      <categories>
        <category>ARS项目</category>
      </categories>
      <tags>
        <tag>ARS项目</tag>
      </tags>
  </entry>
  <entry>
    <title>ARS展览项目（五）——表情识别测试</title>
    <url>/2021/ARS%E5%B1%95%E8%A7%88%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%E8%A1%A8%E6%83%85%E8%AF%86%E5%88%AB%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="这个表情识别项目的第三步"><a href="#这个表情识别项目的第三步" class="headerlink" title="这个表情识别项目的第三步"></a>这个表情识别项目的第三步</h1><p>下面是代码，作用是可以进行表情识别。</p>
<p>本篇博客的实现方法参照了<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ptZHNqdHUvYXJ0aWNsZS9kZXRhaWxzLzUzNjY3OTI5">https://blog.csdn.net/zmdsjtu/article/details/53667929<i class="fa fa-external-link-alt"></i></span>，这个很好用，感谢这位博主。<br><span id="more"></span><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">&quot;/subsystem:windows /entry:mainCRTStartup&quot;</span>)<span class="comment">//去除CMD窗口</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlib/opencv.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlib/image_processing/frontal_face_detector.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlib/image_processing/render_face_detections.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlib/image_processing.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlib/gui_widgets.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> dlib;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//using namespace cv;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv::ml;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function">cv::VideoCapture <span class="title">cap</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">		<span class="keyword">if</span> (!cap.<span class="built_in">isOpened</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			cerr &lt;&lt; <span class="string">&quot;Unable to connect to camera&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//image_window win;  </span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// Load face detection and pose estimation models.  </span></span><br><span class="line">		frontal_face_detector detector = <span class="built_in">get_frontal_face_detector</span>();</span><br><span class="line">		shape_predictor pose_model;</span><br><span class="line">		<span class="built_in">deserialize</span>(<span class="string">&quot;shape_predictor_68_face_landmarks.dat&quot;</span>) &gt;&gt; pose_model;</span><br><span class="line"></span><br><span class="line">		cv::Ptr&lt;SVM&gt; svm = StatModel::load&lt;SVM&gt;(<span class="string">&quot;SVM_DATA.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Grab and process frames until the main window is closed by the user.  </span></span><br><span class="line">		<span class="keyword">while</span> (cv::<span class="built_in">waitKey</span>(<span class="number">30</span>) != <span class="number">27</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// Grab a frame  </span></span><br><span class="line">			cv::Mat temp;</span><br><span class="line">			cap &gt;&gt; temp;</span><br><span class="line"></span><br><span class="line">			<span class="function">cv_image&lt;bgr_pixel&gt; <span class="title">cimg</span><span class="params">(temp)</span></span>;</span><br><span class="line">			<span class="comment">// Detect faces   </span></span><br><span class="line">			std::vector&lt;rectangle&gt; faces = <span class="built_in">detector</span>(cimg);</span><br><span class="line">			<span class="comment">// Find the pose of each face.  </span></span><br><span class="line">			std::vector&lt;full_object_detection&gt; shapes;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">long</span> i = <span class="number">0</span>; i &lt; faces.<span class="built_in">size</span>(); ++i)</span><br><span class="line">				shapes.<span class="built_in">push_back</span>(<span class="built_in">pose_model</span>(cimg, faces[i]));</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (!shapes.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">				<span class="keyword">float</span> testData[<span class="number">1</span>][<span class="number">136</span>];</span><br><span class="line">				<span class="keyword">float</span> 系数 = -(faces[<span class="number">0</span>].<span class="built_in">top</span>() - faces[<span class="number">0</span>].<span class="built_in">bottom</span>()) / <span class="number">300.0</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">68</span>; i++) &#123;</span><br><span class="line">					<span class="built_in">circle</span>(temp, <span class="built_in">cvPoint</span>(shapes[<span class="number">0</span>].<span class="built_in">part</span>(i).<span class="built_in">x</span>(), shapes[<span class="number">0</span>].<span class="built_in">part</span>(i).<span class="built_in">y</span>()), <span class="number">2</span>, cv::<span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">-1</span>);</span><br><span class="line">					testData[<span class="number">0</span>][i * <span class="number">2</span>] = (shapes[<span class="number">0</span>].<span class="built_in">part</span>(i).<span class="built_in">x</span>() - faces[<span class="number">0</span>].<span class="built_in">left</span>()) / 系数;</span><br><span class="line">					testData[<span class="number">0</span>][i * <span class="number">2</span> + <span class="number">1</span>] = (shapes[<span class="number">0</span>].<span class="built_in">part</span>(i).<span class="built_in">y</span>() - faces[<span class="number">0</span>].<span class="built_in">top</span>()) / 系数;</span><br><span class="line">					<span class="comment">//  shapes[0].part(i).x();//68个  </span></span><br><span class="line">				&#125;</span><br><span class="line">				cv::Mat 结果;</span><br><span class="line"></span><br><span class="line">				<span class="function">cv::Mat <span class="title">query</span><span class="params">(<span class="number">1</span>, <span class="number">136</span>, CV_32FC1, testData)</span></span>;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (svm-&gt;<span class="built_in">predict</span>(query) == <span class="number">250</span>) &#123;</span><br><span class="line">					cv::<span class="built_in">putText</span>(temp, <span class="string">&quot;Happy&quot;</span>, cv::<span class="built_in">Point</span>(<span class="number">20</span>, <span class="number">60</span>), <span class="number">3</span>, <span class="number">2</span>, <span class="built_in">cvScalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">					cout &lt;&lt; <span class="string">&quot;高兴&quot;</span> &lt;&lt; endl;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (svm-&gt;<span class="built_in">predict</span>(query) == <span class="number">170</span>) &#123;</span><br><span class="line">					cv::<span class="built_in">putText</span>(temp, <span class="string">&quot;Common&quot;</span>, cv::<span class="built_in">Point</span>(<span class="number">20</span>, <span class="number">60</span>), <span class="number">3</span>, <span class="number">2</span>, <span class="built_in">cvScalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">					cout &lt;&lt; <span class="string">&quot;平静&quot;</span> &lt;&lt; endl;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (svm-&gt;<span class="built_in">predict</span>(query) == <span class="number">300</span>) &#123;</span><br><span class="line">					cv::<span class="built_in">putText</span>(temp, <span class="string">&quot;Disgust&quot;</span>, cv::<span class="built_in">Point</span>(<span class="number">20</span>, <span class="number">60</span>), <span class="number">3</span>, <span class="number">2</span>, <span class="built_in">cvScalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">					cout &lt;&lt; <span class="string">&quot;厌恶&quot;</span> &lt;&lt; endl;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (svm-&gt;<span class="built_in">predict</span>(query) == <span class="number">350</span>) &#123;</span><br><span class="line">					cv::<span class="built_in">putText</span>(temp, <span class="string">&quot;Angry&quot;</span>, cv::<span class="built_in">Point</span>(<span class="number">20</span>, <span class="number">60</span>), <span class="number">3</span>, <span class="number">2</span>, <span class="built_in">cvScalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">					cout &lt;&lt; <span class="string">&quot;生气&quot;</span> &lt;&lt; endl;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//	cout&lt;&lt;	svm-&gt;predict(query)&lt;&lt;endl;</span></span><br><span class="line">				<span class="comment">//	cout &lt;&lt; 结果 &lt;&lt; endl;</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//Display it all on the screen  </span></span><br><span class="line">			<span class="built_in">imshow</span>(<span class="string">&quot;表情识别      ESC退出&quot;</span>, temp);</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in"><span class="keyword">catch</span></span> (serialization_error&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;You need dlib&#x27;s default face landmarking model file to run this example.&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;You can get it from the following URL: &quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;   http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; endl &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in"><span class="keyword">catch</span></span> (exception&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>ARS项目</category>
      </categories>
      <tags>
        <tag>ARS项目</tag>
      </tags>
  </entry>
  <entry>
    <title>ARS展览项目（四）——SVM分类器</title>
    <url>/2021/ARS%E5%B1%95%E8%A7%88%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94SVM%E5%88%86%E7%B1%BB%E5%99%A8/</url>
    <content><![CDATA[<h1 id="这个表情识别项目的第二步"><a href="#这个表情识别项目的第二步" class="headerlink" title="这个表情识别项目的第二步"></a>这个表情识别项目的第二步</h1><p>下面是代码，作用是把上面识别的n个txt，利用SVM分类器训练出一个数据集，这个数据集可以包含好几个标签。</p>
<p>本篇博客的实现方法参照了<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ptZHNqdHUvYXJ0aWNsZS9kZXRhaWxzLzUzNjY3OTI5">https://blog.csdn.net/zmdsjtu/article/details/53667929<i class="fa fa-external-link-alt"></i></span>，这个很好用，感谢这位博主。<br><span id="more"></span><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span>    </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv::ml;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_data</span><span class="params">(<span class="keyword">float</span> data[<span class="number">200</span>][<span class="number">136</span>], <span class="keyword">int</span> begin1, string categrious)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> data_series[<span class="number">200</span>][<span class="number">136</span>];</span><br><span class="line"></span><br><span class="line">	<span class="built_in">read_data</span>(data_series, <span class="number">0</span>, <span class="string">&quot;平静&quot;</span>);</span><br><span class="line">	<span class="built_in">read_data</span>(data_series, <span class="number">50</span>, <span class="string">&quot;高兴&quot;</span>);</span><br><span class="line">	<span class="built_in">read_data</span>(data_series, <span class="number">100</span>, <span class="string">&quot;厌恶&quot;</span>);</span><br><span class="line">	<span class="built_in">read_data</span>(data_series, <span class="number">150</span>, <span class="string">&quot;生气&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> face_tags[<span class="number">200</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">		face_tags[i] = <span class="number">170</span>;</span><br><span class="line">		face_tags[i + <span class="number">50</span>] = <span class="number">250</span>;</span><br><span class="line">		face_tags[i + <span class="number">100</span>] = <span class="number">300</span>;</span><br><span class="line">		face_tags[i + <span class="number">150</span>] = <span class="number">350</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//训练需要用到的数据</span></span><br><span class="line">	<span class="comment">//	int 标签[4] = &#123; 1, 2, 3, 4 &#125;;</span></span><br><span class="line">	<span class="comment">//	float 训练数据[4][2] = &#123; &#123; 31, 12 &#125;,&#123; 65, 220 &#125;,&#123; 440, 350 &#125;,&#123; 400, 400 &#125; &#125;;</span></span><br><span class="line">	<span class="comment">//转为Mat以调用</span></span><br><span class="line">	<span class="function">Mat <span class="title">training_Mat</span><span class="params">(<span class="number">200</span>, <span class="number">136</span>, CV_32FC1, data_series)</span></span>;<span class="comment">//这边数据类型要处理好，不然粗事儿</span></span><br><span class="line">	<span class="function">Mat <span class="title">tags_label</span><span class="params">(<span class="number">200</span>, <span class="number">1</span>, CV_32SC1, face_tags)</span></span>;</span><br><span class="line">	<span class="comment">//训练的初始化</span></span><br><span class="line">	Ptr&lt;SVM&gt; svm = SVM::<span class="built_in">create</span>();</span><br><span class="line">	svm-&gt;<span class="built_in">setType</span>(SVM::C_SVC);</span><br><span class="line">	svm-&gt;<span class="built_in">setKernel</span>(SVM::LINEAR);</span><br><span class="line">	svm-&gt;<span class="built_in">setTermCriteria</span>(<span class="built_in">TermCriteria</span>(TermCriteria::MAX_ITER, <span class="number">100</span>, <span class="number">1e-6</span>));</span><br><span class="line">	<span class="comment">//开始训练</span></span><br><span class="line">	svm-&gt;<span class="built_in">train</span>(training_Mat, ROW_SAMPLE, tags_label);</span><br><span class="line">	svm-&gt;<span class="built_in">save</span>(<span class="string">&quot;SVM_DATA.xml&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_data</span><span class="params">(<span class="keyword">float</span> data[<span class="number">200</span>][<span class="number">136</span>], <span class="keyword">int</span> begin1, string categrious)</span> </span>&#123;</span><br><span class="line">	fstream read_file;</span><br><span class="line">	<span class="comment">//  read_file.imbue(std::locale(&quot;chs&quot;)); </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">		read_file.<span class="built_in">open</span>(categrious + <span class="string">&quot;\\&quot;</span> + <span class="built_in">to_string</span>(i + <span class="number">1</span>) + <span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">136</span>; j++) &#123;</span><br><span class="line">			string aaa;</span><br><span class="line">			read_file &gt;&gt; aaa;</span><br><span class="line">			<span class="comment">//			cout &lt;&lt; aaa;			</span></span><br><span class="line">			data[i + begin1][j] = <span class="built_in">atof</span>(aaa.<span class="built_in">c_str</span>());</span><br><span class="line">		&#125;</span><br><span class="line">		read_file.<span class="built_in">close</span>();<span class="comment">//关闭是个好习惯 </span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>ARS项目</category>
      </categories>
      <tags>
        <tag>ARS项目</tag>
      </tags>
  </entry>
  <entry>
    <title>ARS展览项目（三）——识别面部得到特征点</title>
    <url>/2021/ARS%E5%B1%95%E8%A7%88%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E8%AF%86%E5%88%AB%E9%9D%A2%E9%83%A8%E5%BE%97%E5%88%B0%E7%89%B9%E5%BE%81%E7%82%B9/</url>
    <content><![CDATA[<h1 id="这个表情识别项目的第一步"><a href="#这个表情识别项目的第一步" class="headerlink" title="这个表情识别项目的第一步"></a>这个表情识别项目的第一步</h1><p>下面是代码，作用是识别出人脸，并且把人脸标记为68个特征点。<br>然后把每次识别的一组（68个数据）保存在 .txt文件里，一秒识别n次，那么一秒就生成n个txt</p>
<p>本篇博客的实现方法参照了<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ptZHNqdHUvYXJ0aWNsZS9kZXRhaWxzLzUzNjY3OTI5">https://blog.csdn.net/zmdsjtu/article/details/53667929<i class="fa fa-external-link-alt"></i></span>，这个很好用，感谢这位博主。<br><span id="more"></span><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#pragma comment(linker, &quot;/subsystem:windows /entry:mainCRTStartup&quot;)//去除CMD窗口</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlib/opencv.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlib/image_processing/frontal_face_detector.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlib/image_processing/render_face_detections.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlib/image_processing.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlib/gui_widgets.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> dlib;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_txt</span><span class="params">(string name1, string content1, <span class="keyword">bool</span> over_write)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="function">cv::VideoCapture <span class="title">cap</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//image_window win;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// Load face detection and pose estimation models.</span></span><br><span class="line">		frontal_face_detector detector = <span class="built_in">get_frontal_face_detector</span>();</span><br><span class="line">		shape_predictor pose_model;</span><br><span class="line">		<span class="built_in">deserialize</span>(<span class="string">&quot;shape_predictor_68_face_landmarks.dat&quot;</span>) &gt;&gt; pose_model;</span><br><span class="line">		std::vector&lt;rectangle&gt; faces2;</span><br><span class="line">		<span class="comment">// Grab and process frames until the main window is closed by the user.</span></span><br><span class="line">		<span class="keyword">int</span> filename = <span class="number">0</span>;</span><br><span class="line">		<span class="comment">//	while (cv::waitKey(30) != 27)</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//	while (cv::waitKey(30) != 27)&#123;</span></span><br><span class="line">		<span class="comment">//	cv::VideoCapture cap(&quot;1.avi&quot;);</span></span><br><span class="line">		<span class="keyword">if</span> (!cap.<span class="built_in">isOpened</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			cerr &lt;&lt; <span class="string">&quot;Unable to connect to camera&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> frame1 = cap.<span class="built_in">get</span>(<span class="number">7</span>);</span><br><span class="line">		<span class="comment">//	while (cv::waitKey(30) != 27 &amp;&amp; --frame1 != 14)</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (cv::<span class="built_in">waitKey</span>(<span class="number">30</span>) != <span class="number">27</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// Grab a frame</span></span><br><span class="line">			cv::Mat temp;</span><br><span class="line">			cap &gt;&gt; temp;</span><br><span class="line">			<span class="comment">//	temp = cv::imread(&quot;1.bmp&quot;);</span></span><br><span class="line">			<span class="function">cv_image&lt;bgr_pixel&gt; <span class="title">cimg</span><span class="params">(temp)</span></span>;</span><br><span class="line">			<span class="comment">// Detect faces </span></span><br><span class="line">			std::vector&lt;rectangle&gt; faces = <span class="built_in">detector</span>(cimg);</span><br><span class="line">			<span class="keyword">if</span> (!faces.<span class="built_in">empty</span>())faces2 = faces;</span><br><span class="line">			<span class="comment">// Find the pose of each face.</span></span><br><span class="line">			std::vector&lt;full_object_detection&gt; shapes;</span><br><span class="line">			<span class="keyword">if</span> (faces.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"></span><br><span class="line">				<span class="comment">//		for (unsigned long i = 0; i &lt; faces2.size(); ++i)</span></span><br><span class="line">				<span class="comment">//	shapes.push_back(pose_model(cimg, faces2[i]));</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">long</span> i = <span class="number">0</span>; i &lt; faces.<span class="built_in">size</span>(); ++i)</span><br><span class="line">					shapes.<span class="built_in">push_back</span>(<span class="built_in">pose_model</span>(cimg, faces[i]));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!shapes.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">				cv::<span class="built_in">line</span>(temp, <span class="built_in">cvPoint</span>(faces[<span class="number">0</span>].<span class="built_in">left</span>(), faces[<span class="number">0</span>].<span class="built_in">top</span>()), <span class="built_in">cvPoint</span>(faces[<span class="number">0</span>].<span class="built_in">right</span>(), faces[<span class="number">0</span>].<span class="built_in">top</span>()), cv::<span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">				cv::<span class="built_in">line</span>(temp, <span class="built_in">cvPoint</span>(faces[<span class="number">0</span>].<span class="built_in">left</span>(), faces[<span class="number">0</span>].<span class="built_in">top</span>()), <span class="built_in">cvPoint</span>(faces[<span class="number">0</span>].<span class="built_in">left</span>(), faces[<span class="number">0</span>].<span class="built_in">bottom</span>()), cv::<span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">				filename++;</span><br><span class="line">				<span class="keyword">float</span> aaa2 = -(faces[<span class="number">0</span>].<span class="built_in">top</span>() - faces[<span class="number">0</span>].<span class="built_in">bottom</span>()) / <span class="number">300.0</span>;</span><br><span class="line">				cout &lt;&lt; aaa2 &lt;&lt; endl;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">68</span>; i++) &#123;</span><br><span class="line">					<span class="built_in">circle</span>(temp, <span class="built_in">cvPoint</span>(shapes[<span class="number">0</span>].<span class="built_in">part</span>(i).<span class="built_in">x</span>(), shapes[<span class="number">0</span>].<span class="built_in">part</span>(i).<span class="built_in">y</span>()), <span class="number">3</span>, cv::<span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">-1</span>);</span><br><span class="line">					<span class="built_in">putText</span>(temp, <span class="built_in">to_string</span>(i), <span class="built_in">cvPoint</span>(shapes[<span class="number">0</span>].<span class="built_in">part</span>(i).<span class="built_in">x</span>(), shapes[<span class="number">0</span>].<span class="built_in">part</span>(i).<span class="built_in">y</span>()), CV_FONT_HERSHEY_PLAIN, <span class="number">1</span>, cv::<span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">					<span class="comment">//--------------这部分是想用来采集训练数据的</span></span><br><span class="line"></span><br><span class="line">					<span class="built_in">write_txt</span>((<span class="built_in">to_string</span>(filename) + <span class="string">&quot;.txt&quot;</span>), <span class="built_in">to_string</span>((shapes[<span class="number">0</span>].<span class="built_in">part</span>(i).<span class="built_in">x</span>() - faces[<span class="number">0</span>].<span class="built_in">left</span>()) / aaa2), <span class="number">0</span>);</span><br><span class="line">					<span class="built_in">write_txt</span>((<span class="built_in">to_string</span>(filename) + <span class="string">&quot;.txt&quot;</span>), <span class="built_in">to_string</span>((shapes[<span class="number">0</span>].<span class="built_in">part</span>(i).<span class="built_in">y</span>() - faces[<span class="number">0</span>].<span class="built_in">top</span>()) / aaa2), <span class="number">0</span>);</span><br><span class="line">					<span class="comment">//----------------------------------------------------------------</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//		Drawarrow(temp, shapes[0].part(36).x(), shapes[0].part(48).x(), shapes[0].part(30).x(), shapes[0].part(45).x(), shapes[0].part(54).x(), shapes[0].part(36).y(), shapes[0].part(48).y(), shapes[0].part(30).y(), shapes[0].part(45).y(), shapes[0].part(54).y());</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//Display it all on the screen</span></span><br><span class="line">			<span class="comment">//		cv::namedWindow(&quot;Dlib特征点&quot;, CV_WINDOW_NORMAL);</span></span><br><span class="line">			<span class="comment">//		cv::setWindowProperty(&quot;Dlib特征点&quot;, CV_WND_PROP_FULLSCREEN, CV_WINDOW_FULLSCREEN);</span></span><br><span class="line">			<span class="built_in">imshow</span>(<span class="string">&quot;Dlib特征点&quot;</span>, temp);</span><br><span class="line"></span><br><span class="line">			<span class="comment">//	cv::waitKey(-1);</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//&#125;</span></span><br><span class="line">		cv::<span class="built_in">destroyAllWindows</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in"><span class="keyword">catch</span></span> (serialization_error&amp; e)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;You need dlib&#x27;s default face landmarking model file to run this example.&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;You can get it from the following URL: &quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;   http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; endl &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//catch (exception&amp; e)</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; e.what() &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_txt</span><span class="params">(string name1, string content1, <span class="keyword">bool</span> over_write)</span> </span>&#123;</span><br><span class="line">	<span class="function">ofstream <span class="title">write_into</span><span class="params">(name1, over_write ? ios::trunc : ios::app)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (write_into.<span class="built_in">is_open</span>()) &#123;<span class="comment">//如果成功的话       </span></span><br><span class="line">		write_into &lt;&lt; content1 &lt;&lt; endl;</span><br><span class="line">		write_into.<span class="built_in">close</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>ARS项目</category>
      </categories>
      <tags>
        <tag>ARS项目</tag>
      </tags>
  </entry>
  <entry>
    <title>ARS展览项目（二）——环境搭建：opencv、dlib、VS2017</title>
    <url>/2021/ARS%E5%B1%95%E8%A7%88%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%9Aopencv%E3%80%81dlib%E3%80%81VS2017/</url>
    <content><![CDATA[<h1 id="先说用到的软件和函数库"><a href="#先说用到的软件和函数库" class="headerlink" title="先说用到的软件和函数库"></a>先说用到的软件和函数库</h1><ul>
<li>VS2017——我用VS2017社区版来开发，原因是软件免费而且好用，本项目用C++来做</li>
<li>opencv——Open Computer Vision是计算机视觉的库，有多种语言的接口，而且函数库也很丰富</li>
<li>dlib——Dlib是一个包含机器学习算法的C++开源工具包，提供大量的机器学习 / 图像处理算法（网上看的 :-） ）<br>本项目用的是VS2017社区版+opencv3.4.2版本+dlib9.0.3 。用其它版本也可以，新一点的版本吧。<span id="more"></span>
</li>
</ul>
<h1 id="容易遇到的问题"><a href="#容易遇到的问题" class="headerlink" title="容易遇到的问题"></a>容易遇到的问题</h1><ol>
<li>dlib 配置的时候是需要release|x64 的模式,因为debug模式会让程序运行得非常缓慢，这在dlib官网上有说明<span class="exturl" data-url="aHR0cDovL2RsaWIubmV0L2ZhcS5odG1sI1doeWlzZGxpYnNsb3c=">http://dlib.net/faq.html#Whyisdlibslow<i class="fa fa-external-link-alt"></i></span></li>
</ol>
<h1 id="opencv-在-VS2017-里面的配置"><a href="#opencv-在-VS2017-里面的配置" class="headerlink" title="opencv 在 VS2017 里面的配置"></a>opencv 在 VS2017 里面的配置</h1><p>关于opencv的配置，这个文档已经非常清楚了，<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMTc1OTA1L2FydGljbGUvZGV0YWlscy84MDU2MDQyOQ==">https://blog.csdn.net/qq_41175905/article/details/80560429<i class="fa fa-external-link-alt"></i></span>，非常感谢这位作者的帮助。如果看不懂，多找几篇关于配置的来看，方法都一样，只是详细与否的区别。<br><strong>总结是：</strong></p>
<ol>
<li>比如把opencv安装在了D:\opencv342\ ，安装好后</li>
<li>右键“我的电脑”-&gt;属性-&gt;高级系统设置-&gt;环境变量，在后面添加环境变量： D:\opencv342\opencv\build\x64\vc15\bin</li>
<li>配置好环境变量后，打开VS2017，新建一个C++空项目</li>
<li>打开属性管理器，菜单栏-&gt;视图-&gt;其他窗口-&gt;属性管理器，对release|X64进行配置：右键release|X64-&gt;新建一个属性表，重命名为opencv</li>
<li>双击opencv属性表，属性中的 VC++目录-&gt;包含目录<br>D:\opencv342\opencv\build\include<br>D:\opencv342\opencv\build\include\opencv<br>D:\opencv342\opencv\build\include\opencv2</li>
<li>VC++目录-&gt;库目录<br>D:\opencv342\opencv\build\x64\vc15\lib</li>
<li>链接器-&gt;输入-&gt;附加依赖项中加入<br>opencv_world341d.lib</li>
<li>到这里，opencv就配置好了，第2步时配置环境变量的重点，第5、6、7步是配置vs的重点，第8步可有可无，只是为了未来方便。就是打开第3步的项目文件夹，把刚刚配置好的那个新建的opencv属性表保存在另外一个容易保存的地方就好，到时候要用就把它导入进来，就不用重新配置了。</li>
</ol>
<p><strong>配置好后测试一下：</strong></p>
<ol>
<li>新建一个C++空项目</li>
<li>打开属性管理表，右键release|X64，添加-&gt;现有项，然后把刚刚的opencv属性表导入进去</li>
<li>然后转到解决方案的管理器，右键源文件-&gt;添加新建项，然后添加一个cpp文件，比如是1.cpp</li>
<li>然后把下面的代码粘贴进去</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opencv2/core.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opencv2/imgproc.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opencv2/highgui.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opencv2/videoio.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Built with OpenCV &quot;</span> &lt;&lt; CV_VERSION &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">	<span class="function">VideoCapture <span class="title">capture</span><span class="params">(<span class="number">0</span>)</span></span>;    <span class="comment">// 打开摄像头</span></span><br><span class="line">	<span class="keyword">if</span>(!capture.<span class="built_in">isOpened</span>())    <span class="comment">// 判断是否打开成功</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;open camera failed. &quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Mat frame;</span><br><span class="line">		capture &gt;&gt; frame;    <span class="comment">// 读取图像帧至frame</span></span><br><span class="line">		<span class="keyword">if</span>(!frame.<span class="built_in">empty</span>())	<span class="comment">// 判断是否为空</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">imshow</span>(<span class="string">&quot;camera&quot;</span>, frame);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">waitKey</span>(<span class="number">30</span>) &gt; <span class="number">0</span>)		<span class="comment">// delay 30 ms等待按键</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>这个代码的意思是打开笔记本电脑自带的摄像头，要是没有摄像头的话要借一个usb摄像头，然后把代码里的 <code>VideoCapture capture(0);</code> 改成 <code>VideoCapture capture(1);</code>，就可以打开usb摄像头。</li>
<li>如果可以，那么opencv的配置就成功了。</li>
</ol>
<h1 id="dlib-在-VS2017-里面的配置"><a href="#dlib-在-VS2017-里面的配置" class="headerlink" title="dlib 在 VS2017 里面的配置"></a>dlib 在 VS2017 里面的配置</h1><p>关于dlib的配置，这个文档，<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZGFwZW5nLWJ1cHQvcC83ODA3Njc5Lmh0bWw=">https://www.cnblogs.com/dapeng-bupt/p/7807679.html<i class="fa fa-external-link-alt"></i></span>和这个文档<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N6cDE5OTQwMjIzL2FydGljbGUvZGV0YWlscy83ODU3NzU3MA==">https://blog.csdn.net/czp19940223/article/details/78577570<i class="fa fa-external-link-alt"></i></span>，啊也非常感谢这两位作者的帮助。<br><strong>具体就是：</strong></p>
<ol>
<li>下载并且解压安装包</li>
<li>cmake 编译dlib （这是为了得到dlib.lib）(比如编译报存的文件夹是D:\dlib-9.0.3\dlibmake)</li>
<li>打开vs，打开刚刚cmake编译的dlib项目，然后用release x64来重新编译dlib</li>
<li>然后新建空项目，然后release|x64 新建属性表</li>
<li>VC++目录-&gt;包含目录，把dlib刚开始解压的目录写进去（比如D:\dlib-9.0.3）</li>
<li>VC++目录-&gt;库目录，把刚刚生成的lib目录放进去(比如D:\dlib-9.0.3\dlibmake\release)</li>
<li>链接器-&gt;输入-&gt;附加依赖项，加入dlib.lib （如果不是这个名字就改成你文件夹里的那个lib的名字）</li>
<li>把属性表保存好</li>
</ol>
<p><strong>配置好后测试一下：</strong></p>
<ol>
<li>新建空项目，release|x64 导入刚刚的属性表</li>
<li>在源文件那里，新建一个cpp源文件</li>
<li>写入下面的代码</li>
<li>把这里的代码复制进去运行，（这位作者的代码）<span class="exturl" data-url="aHR0cDovL2RsaWIubmV0L2d1aV9hcGlfZXguY3BwLmh0bWw=">http://dlib.net/gui_api_ex.cpp.html<i class="fa fa-external-link-alt"></i></span>，如果可以运行就行了。</li>
<li>为了方便也贴在下面，但是比较多</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The contents of this file are in the public domain. See LICENSE_FOR_EXAMPLE_PROGRAMS.txt</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    This is an example illustrating the use of the gui api from the dlib C++ Library.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    This is a pretty simple example.  It makes a window with a user</span></span><br><span class="line"><span class="comment">    defined widget (a draggable colored box) and a button.  You can drag the</span></span><br><span class="line"><span class="comment">    box around or click the button which increments a counter. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlib/gui_widgets.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> dlib;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">color_box</span> :</span> <span class="keyword">public</span> draggable </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Here I am defining a custom drawable widget that is a colored box that</span></span><br><span class="line"><span class="comment">        you can drag around on the screen.  draggable is a special kind of drawable</span></span><br><span class="line"><span class="comment">        object that, as the name implies, is draggable by the user via the mouse.</span></span><br><span class="line"><span class="comment">        To make my color_box draggable all I need to do is inherit from draggable.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> red, green,blue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">color_box</span> (</span><br><span class="line">        drawable_window&amp; w,</span><br><span class="line">        rectangle area,</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> red_,</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> green_,</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> blue_</span><br><span class="line">    ) :</span><br><span class="line">        <span class="built_in">draggable</span>(w),</span><br><span class="line">        <span class="built_in">red</span>(red_),</span><br><span class="line">        <span class="built_in">green</span>(green_),</span><br><span class="line">        <span class="built_in">blue</span>(blue_)</span><br><span class="line">    &#123;</span><br><span class="line">        rect = area;</span><br><span class="line">        <span class="built_in">set_draggable_area</span>(<span class="built_in">rectangle</span>(<span class="number">10</span>,<span class="number">10</span>,<span class="number">400</span>,<span class="number">400</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Whenever you make your own drawable widget (or inherit from any drawable widget </span></span><br><span class="line">        <span class="comment">// or interface such as draggable) you have to remember to call this function to </span></span><br><span class="line">        <span class="comment">// enable the events.  The idea here is that you can perform whatever setup you </span></span><br><span class="line">        <span class="comment">// need to do to get your object into a valid state without needing to worry about </span></span><br><span class="line">        <span class="comment">// event handlers triggering before you are ready.</span></span><br><span class="line">        <span class="built_in">enable_events</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">color_box</span> (</span><br><span class="line">    )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Disable all further events for this drawable object.  We have to do this </span></span><br><span class="line">        <span class="comment">// because we don&#x27;t want any events (like draw()) coming to this object while or </span></span><br><span class="line">        <span class="comment">// after it has been destructed.</span></span><br><span class="line">        <span class="built_in">disable_events</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Tell the parent window to redraw its area that previously contained this</span></span><br><span class="line">        <span class="comment">// drawable object.</span></span><br><span class="line">        parent.<span class="built_in">invalidate_rectangle</span>(rect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">const</span> canvas&amp; c</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// The canvas is an object that represents a part of the parent window</span></span><br><span class="line">        <span class="comment">// that needs to be redrawn.  </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// The first thing I usually do is check if the draw call is for part</span></span><br><span class="line">        <span class="comment">// of the window that overlaps with my widget.  We don&#x27;t have to do this </span></span><br><span class="line">        <span class="comment">// but it is usually good to do as a speed hack.  Also, the reason</span></span><br><span class="line">        <span class="comment">// I don&#x27;t have it set to only give you draw calls when it does indeed</span></span><br><span class="line">        <span class="comment">// overlap is because you might want to do some drawing outside of your</span></span><br><span class="line">        <span class="comment">// widget&#x27;s rectangle.  But usually you don&#x27;t want to do that :)</span></span><br><span class="line">        rectangle area = c.<span class="built_in">intersect</span>(rect);</span><br><span class="line">        <span class="keyword">if</span> (area.<span class="built_in">is_empty</span>() == <span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This simple widget is just going to draw a box on the screen.   </span></span><br><span class="line">        <span class="built_in">fill_rect</span>(c,rect,<span class="built_in">rgb_pixel</span>(red,green,blue));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">win</span> :</span> <span class="keyword">public</span> drawable_window </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Here I am going to define our window.  In general, you can define as </span></span><br><span class="line"><span class="comment">        many window types as you like and make as many instances of them as you want.</span></span><br><span class="line"><span class="comment">        In this example I am only making one though.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">win</span>(</span><br><span class="line">    ) : <span class="comment">// All widgets take their parent window as an argument to their constructor.</span></span><br><span class="line">        <span class="built_in">c</span>(*<span class="keyword">this</span>),</span><br><span class="line">        <span class="built_in">b</span>(*<span class="keyword">this</span>),</span><br><span class="line">        <span class="built_in">cb</span>(*<span class="keyword">this</span>,<span class="built_in">rectangle</span>(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>),<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>), <span class="comment">// the color_box will be blue and 101 pixels wide and tall</span></span><br><span class="line">        <span class="built_in">mbar</span>(*<span class="keyword">this</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// tell our button to put itself at the position (10,60). </span></span><br><span class="line">        b.<span class="built_in">set_pos</span>(<span class="number">10</span>,<span class="number">60</span>);</span><br><span class="line">        b.<span class="built_in">set_name</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// let&#x27;s put the label 5 pixels below the button</span></span><br><span class="line">        c.<span class="built_in">set_pos</span>(b.<span class="built_in">left</span>(),b.<span class="built_in">bottom</span>()+<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// set which function should get called when the button gets clicked.  In this case we want</span></span><br><span class="line">        <span class="comment">// the on_button_clicked member to be called on *this.</span></span><br><span class="line">        b.<span class="built_in">set_click_handler</span>(*<span class="keyword">this</span>,&amp;win::on_button_clicked);</span><br><span class="line">        <span class="comment">// Alternatively, if you have a compiler which supports the lambda functions from the</span></span><br><span class="line">        <span class="comment">// new C++ standard then you can use a lambda function instead of telling the click</span></span><br><span class="line">        <span class="comment">// handler to call one of the member functions.  So for example, you could do this</span></span><br><span class="line">        <span class="comment">// instead (uncomment the code if you have C++0x support):</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        b.set_click_handler([&amp;]()&#123;</span></span><br><span class="line"><span class="comment">                ++counter;</span></span><br><span class="line"><span class="comment">                ostringstream sout;</span></span><br><span class="line"><span class="comment">                sout &lt;&lt; &quot;Counter: &quot; &lt;&lt; counter;</span></span><br><span class="line"><span class="comment">                c.set_text(sout.str());</span></span><br><span class="line"><span class="comment">                &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// In general, all the functions which register events can take either member </span></span><br><span class="line">        <span class="comment">// functions or lambda functions.</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Let&#x27;s also make a simple menu bar.  </span></span><br><span class="line">        <span class="comment">// First we say how many menus we want in our menu bar.  In this example we only want 1.</span></span><br><span class="line">        mbar.<span class="built_in">set_number_of_menus</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// Now we set the name of our menu.  The &#x27;M&#x27; means that the M in Menu will be underlined</span></span><br><span class="line">        <span class="comment">// and the user will be able to select it by hitting alt+M</span></span><br><span class="line">        mbar.<span class="built_in">set_menu_name</span>(<span class="number">0</span>,<span class="string">&quot;Menu&quot;</span>,<span class="string">&#x27;M&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now we add some items to the menu.  Note that items in a menu are listed in the</span></span><br><span class="line">        <span class="comment">// order in which they were added.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// First let&#x27;s make a menu item that does the same thing as our button does when it is clicked.</span></span><br><span class="line">        <span class="comment">// Again, the &#x27;C&#x27; means the C in Click is underlined in the menu. </span></span><br><span class="line">        mbar.<span class="built_in">menu</span>(<span class="number">0</span>).<span class="built_in">add_menu_item</span>(<span class="built_in">menu_item_text</span>(<span class="string">&quot;Click Button!&quot;</span>,*<span class="keyword">this</span>,&amp;win::on_button_clicked,<span class="string">&#x27;C&#x27;</span>));</span><br><span class="line">        <span class="comment">// let&#x27;s add a separator (i.e. a horizontal separating line) to the menu</span></span><br><span class="line">        mbar.<span class="built_in">menu</span>(<span class="number">0</span>).<span class="built_in">add_menu_item</span>(<span class="built_in">menu_item_separator</span>());</span><br><span class="line">        <span class="comment">// Now let&#x27;s make a menu item that calls show_about when the user selects it.  </span></span><br><span class="line">        mbar.<span class="built_in">menu</span>(<span class="number">0</span>).<span class="built_in">add_menu_item</span>(<span class="built_in">menu_item_text</span>(<span class="string">&quot;About&quot;</span>,*<span class="keyword">this</span>,&amp;win::show_about,<span class="string">&#x27;A&#x27;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// set the size of this window</span></span><br><span class="line">        <span class="built_in">set_size</span>(<span class="number">430</span>,<span class="number">380</span>);</span><br><span class="line"></span><br><span class="line">        counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">set_title</span>(<span class="string">&quot;dlib gui example&quot;</span>);</span><br><span class="line">        <span class="built_in">show</span>();</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">win</span>(</span><br><span class="line">    )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// You should always call close_window() in the destructor of window</span></span><br><span class="line">        <span class="comment">// objects to ensure that no events will be sent to this window while </span></span><br><span class="line">        <span class="comment">// it is being destructed.  </span></span><br><span class="line">        <span class="built_in">close_window</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_button_clicked</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// when someone clicks our button it will increment the counter and </span></span><br><span class="line">        <span class="comment">// display it in our label c.</span></span><br><span class="line">        ++counter;</span><br><span class="line">        ostringstream sout;</span><br><span class="line">        sout &lt;&lt; <span class="string">&quot;counter: &quot;</span> &lt;&lt; counter;</span><br><span class="line">        c.<span class="built_in">set_text</span>(sout.<span class="built_in">str</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show_about</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">message_box</span>(<span class="string">&quot;About&quot;</span>,<span class="string">&quot;This is a dlib gui example program&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> counter;</span><br><span class="line">    label c;</span><br><span class="line">    button b;</span><br><span class="line">    color_box cb;</span><br><span class="line">    menu_bar mbar;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// create our window</span></span><br><span class="line">    win my_window;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// wait until the user closes this window before we let the program </span></span><br><span class="line">    <span class="comment">// terminate.</span></span><br><span class="line">    my_window.<span class="built_in">wait_until_closed</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Normally, if you built this application on MS Windows in Visual Studio you</span></span><br><span class="line"><span class="comment">// would see a black console window pop up when you ran it.  The following</span></span><br><span class="line"><span class="comment">// #pragma directives tell Visual Studio to not include a console window along</span></span><br><span class="line"><span class="comment">// with your application.  However, if you prefer to have the console pop up as</span></span><br><span class="line"><span class="comment">// well then simply remove these #pragma statements.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _MSC_VER</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">pragma</span> comment( linker, <span class="meta-string">&quot;/entry:mainCRTStartup&quot;</span> )</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">pragma</span> comment( linker, <span class="meta-string">&quot;/SUBSYSTEM:WINDOWS&quot;</span> )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  ----------------------------------------------------------------------------</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ARS项目</category>
      </categories>
      <tags>
        <tag>ARS项目</tag>
      </tags>
  </entry>
  <entry>
    <title>ARS展览项目（一）——前言</title>
    <url>/2021/ARS%E5%B1%95%E8%A7%88%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%89%8D%E8%A8%80/</url>
    <content><![CDATA[<p>Ars Electronica Festival 奥地利电子艺术节</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>ARS项目</category>
      </categories>
      <tags>
        <tag>ARS项目</tag>
      </tags>
  </entry>
  <entry>
    <title>“救心来了”项目硬件系统搭建（四）——部分程序内容解释</title>
    <url>/2021/%E2%80%9C%E6%95%91%E5%BF%83%E6%9D%A5%E4%BA%86%E2%80%9D%E9%A1%B9%E7%9B%AE%E7%A1%AC%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E9%83%A8%E5%88%86%E7%A8%8B%E5%BA%8F%E5%86%85%E5%AE%B9%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<p>因为是项目内容，所以程序不能完全贴上来。需要的项目组成员，可以联系我或者项目组长要。以下只是部分的难懂程序的解释，解释懂了，方便以后修改。</p>
<p><br/></p>
<blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPRMC_TERM “$GPRMC,”</span></span><br></pre></td></tr></table></figure>
<ul>
<li>这个是GPS接收到卫星数据包的包头。</li>
</ul>
</blockquote>
<p><br/><br><span id="more"></span></p>
<p><br/></p>
<blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">attachInterrupt</span>( <span class="number">0</span>, onChange, FALLING );<span class="comment">//2号口是第0个中断口</span></span><br></pre></td></tr></table></figure>
<ul>
<li>onChange 是中断触发的函数；FALLING 是中断类型。</li>
<li>意思是 按钮按下去时，中断触发，触发onChange程序。</li>
</ul>
</blockquote>
<p><br/></p>
<blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">sensorVal1=<span class="built_in">String</span>(latitude_1,<span class="number">7</span>); <span class="comment">//WGS-84(GPS)</span></span><br><span class="line">sensorVal2=<span class="built_in">String</span>(longitude_1,<span class="number">7</span>);<span class="comment">// WGS-84(GPS)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*sensorVal1=String(latitude_f,7); // GCJ-02(Google地图)</span></span><br><span class="line"><span class="comment">sensorVal2=String(longitude_f,7);//GCJ-02(Google地图)*/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>GPS数据转换到地图数据的时候，因为各种原因，是需要纠偏的，谷歌地图和百度地图的纠偏是不一样的。</li>
<li>纠偏的数据处理，可以在这里做（后面还有很多东西要改），也可以在后台做，本项目是在后台做，需要的只是发送原始的GPS数据到后台。</li>
<li>有一些网站，可以输入数据，然后把纠偏的数据给你看。上网收藏一下那些网址吧。</li>
</ul>
</blockquote>
<p><br/></p>
<blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"><span class="title">led_test</span><span class="params">()</span></span>;<span class="built_in">delay</span>(n);</span><br></pre></td></tr></table></figure>
<ul>
<li>SendMessage(n) 这个函数，就是控制Arduino通过软串口向GSM模块发送指令。</li>
<li>发送什么内容可在里面改，delay不要太小，不然会乱码。</li>
</ul>
</blockquote>
<p><br/></p>
<blockquote>
<p>还有各种函数嵌套的东西，然后还有接收到GPS才开始动作，或者是没有接收到也可以动作，或者发送预定的GPS数据，都是可以改的。程序只是工具，根据你的需求来做。</p>
</blockquote>
<p><br/></p>
]]></content>
      <categories>
        <category>救心来了 项目</category>
      </categories>
      <tags>
        <tag>救心来了 项目</tag>
      </tags>
  </entry>
  <entry>
    <title>“救心来了”项目硬件系统搭建（三）——调试具体内容</title>
    <url>/2021/%E2%80%9C%E6%95%91%E5%BF%83%E6%9D%A5%E4%BA%86%E2%80%9D%E9%A1%B9%E7%9B%AE%E7%A1%AC%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E8%B0%83%E8%AF%95%E5%85%B7%E4%BD%93%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<h1 id="Arduino"><a href="#Arduino" class="headerlink" title="Arduino"></a>Arduino</h1><ul>
<li>Arduino要接很多线，小心别搞混，有些线很松的，就换一根吧。</li>
<li>用到中断，要是改的话，注意哪些口可以用作中断，哪些不可以。</li>
</ul>
<span id="more"></span>
<h1 id="GPS模块"><a href="#GPS模块" class="headerlink" title="GPS模块"></a>GPS模块</h1><p>单个模块调试可以先接usb转ttl来测试，波特率9600. 模块冷启动需要28s，热启动需要3s。启动后是要等半分钟左右看看有没有信号。</p>
<ol>
<li>常亮，表示模块已开始工作，但还未实现定位。</li>
<li>闪烁（100ms 灭，900ms 亮），表示模块已经定位成功。</li>
</ol>
<h2 id="模块一直都定位不了"><a href="#模块一直都定位不了" class="headerlink" title="模块一直都定位不了"></a>模块一直都定位不了</h2><ul>
<li>可能在室内，接个天线连到室外吧。</li>
<li>连了天线到室外还是定位不了——把GPS和天线那个螺母那里拧松再拧回去，用钳子拧超紧。</li>
</ul>
<div align=center><img src="https://gitee.com/atan2021/pic/raw/master/20210905_GPSluomu.jpg" alt='GPS连天线的螺母' height="100"/></div>

<ul>
<li>还是定位不了——可能你的usb转ttl模块坏了，电压不够或者什么的</li>
<li>还是不行——你惨了，换一个看看吧 ：）</li>
</ul>
<h2 id="模块有信号（正常闪烁），但是没有数据返回或者返回乱码"><a href="#模块有信号（正常闪烁），但是没有数据返回或者返回乱码" class="headerlink" title="模块有信号（正常闪烁），但是没有数据返回或者返回乱码"></a>模块有信号（正常闪烁），但是没有数据返回或者返回乱码</h2><ul>
<li>没有数据返回——可能是TX和RX接反了。</li>
<li>返回乱码——看看是不是你的波特率不对，如果是已经连接Arduino，看看虚拟串口的波特率对不对。</li>
</ul>
<h1 id="GSM模块"><a href="#GSM模块" class="headerlink" title="GSM模块"></a>GSM模块</h1><p>单个模块调试可以先用usb转ttl模块，波特率115200. 具体内容和调试指令很多，要看调试说明书，这里提醒一些容易忽略的东西。</p>
<ul>
<li>没有特殊情况，就接四根线就好：VCC、GND、5VT、5VR.</li>
<li><strong>电压要很稳，而且功率要够</strong>。如果一直连不上网，要看是不是电池没电了，耗电很快的。</li>
<li>用SIM大卡，有时候金手指地方要用橡皮擦一下。</li>
</ul>
<blockquote>
<p>有别的GSM的模块，比如GA6模块，但是GA6模块对于http是不能get操作的，就不能用，所以本项目一直在用SIM900A模块。再说一次，注意电压和功率。</p>
</blockquote>
<h1 id="TFT模块"><a href="#TFT模块" class="headerlink" title="TFT模块"></a>TFT模块</h1><p>TFT模块没有很多要注意的地方，注意接好线就行，然后2、8接口都是要接3.3V的，但是Arduino只有一个3.3V，先把线弄好，不接在上面也可以，买一个小小的3.3V稳压，或者拿舵机的稳压。这个模块对电压要求不是很大。</p>
<h1 id="LED小模块"><a href="#LED小模块" class="headerlink" title="LED小模块"></a>LED小模块</h1><ul>
<li>没啥好说啊</li>
</ul>
<h1 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h1><ul>
<li>作为中断</li>
</ul>
<h1 id="电源和稳压模块"><a href="#电源和稳压模块" class="headerlink" title="电源和稳压模块"></a>电源和稳压模块</h1><ul>
<li>没啥好说</li>
</ul>
<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><ul>
<li>没啥好说</li>
</ul>
<p><img src="https://gitee.com/atan2021/pic/raw/master/20210905_xixi.png" alt=""></p>
]]></content>
      <categories>
        <category>救心来了 项目</category>
      </categories>
      <tags>
        <tag>救心来了 项目</tag>
      </tags>
  </entry>
  <entry>
    <title>“救心来了”项目硬件系统搭建（二）——接线具体内容</title>
    <url>/2021/%E2%80%9C%E6%95%91%E5%BF%83%E6%9D%A5%E4%BA%86%E2%80%9D%E9%A1%B9%E7%9B%AE%E7%A1%AC%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E6%8E%A5%E7%BA%BF%E5%85%B7%E4%BD%93%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<h1 id="各部分硬件的连线说明"><a href="#各部分硬件的连线说明" class="headerlink" title="各部分硬件的连线说明"></a>各部分硬件的连线说明</h1><style>
table th:nth-of-type(1) {width: 100px;}
th:nth-of-type(2) {width: 50px;}
th:nth-of-type(3) {width: 50px;}
th:nth-of-type(4) {width: 50px;}
th:nth-of-type(5) {width: 50px;}
th:nth-of-type(6) {width: 70px;}
th:nth-of-type(7) {width: 800px;}
table {margin-left: auto; margin-right: auto}
</style>

<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Arduino</th>
<th style="text-align:center">GPS</th>
<th style="text-align:center">GSM</th>
<th style="text-align:center">TFT</th>
<th style="text-align:center">LED</th>
<th style="text-align:center">按钮</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">任一端</td>
<td style="text-align:center">按钮按下作为中断信号，D2为中断口</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">VCC</td>
<td style="text-align:center"></td>
<td style="text-align:center">Arduino每发送一条指令到GSM，LED闪一次，本程序会发11条指令组合成一个求救信号</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">TX</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">此处定义Arduino虚拟串口serial1,rx为4号端口,tx为5号端口</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">RX</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center"></td>
<td style="text-align:center">5VTX</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">此处定义Arduino虚拟串口serial2,rx为6号端口,tx为7号端口</td>
</tr>
</tbody>
</table>
</div>
<span id="more"></span>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Arduino</th>
<th style="text-align:center">GPS</th>
<th style="text-align:center">GSM</th>
<th style="text-align:center">TFT</th>
<th style="text-align:center">LED</th>
<th style="text-align:center">按钮</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center"></td>
<td style="text-align:center">5VRX</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">5</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">6</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">7</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">4</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">1</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Arduino</th>
<th style="text-align:center">GPS</th>
<th style="text-align:center">GSM</th>
<th style="text-align:center">TFT</th>
<th style="text-align:center">LED</th>
<th style="text-align:center">按钮</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A0</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">A1</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">A2</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">A3</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">A4</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">A5</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">3.3V</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">2、8</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">tft_8为使能端，一直用就接3.3v，其它接口看模块背面</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Arduino"><a href="#Arduino" class="headerlink" title="Arduino"></a>Arduino</h2><ul>
<li>Arduino的模拟口没有使用过。</li>
<li>Arduino逻辑电路供电：5V——电源5V.</li>
<li>除了按钮和LED模块外，其它模块将不从Arduino供电，否则模块无法使用，且烧坏Arduino.</li>
</ul>
<h2 id="GPS模块"><a href="#GPS模块" class="headerlink" title="GPS模块"></a>GPS模块</h2><ul>
<li>VCC接电源5V，GND接地。</li>
<li>排针最好焊好。</li>
</ul>
<h2 id="GSM模块"><a href="#GSM模块" class="headerlink" title="GSM模块"></a>GSM模块</h2><ul>
<li>VCC接电源5V，GND接地。</li>
<li>5VTX意思是5V时候的TX，在模块上标识为5VT。5VRX同理。</li>
</ul>
<h2 id="TFT模块"><a href="#TFT模块" class="headerlink" title="TFT模块"></a>TFT模块</h2><ul>
<li>按表接线就可以了，3.3V不要接到5V上面去。</li>
</ul>
<h2 id="LED小模块"><a href="#LED小模块" class="headerlink" title="LED小模块"></a>LED小模块</h2><ul>
<li>如果没有LED小模块，用普通LED+4.7k电阻也可以。</li>
</ul>
<h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><ul>
<li>用其它种类按钮也可，点动且常开（与中断语句的设置有关）的按钮就行。</li>
<li>一端接Arduino_D2，另一端则接GND.</li>
</ul>
<h2 id="电源和稳压模块"><a href="#电源和稳压模块" class="headerlink" title="电源和稳压模块"></a>电源和稳压模块</h2><ul>
<li>电源是4*3.7V，可以提供足够功率，也需要接稳压模块。</li>
<li>电池正反极接错会马上爆火花，不要好奇想试试。</li>
</ul>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul>
<li>各模块的电源接线最好做成接口，用合适的小接口，调试拔插时会方便很多。</li>
</ul>
<table>
    <tr>
        <td ><center><img src="https://gitee.com/atan2021/pic/raw/master/20210905_jietou1.jpg" alt='接电源VCC、GND的小接头' height="200"></center></td>
        <td ><center><img src="https://gitee.com/atan2021/pic/raw/master/20210905_jietou2.jpg"  alt='小模块电源的小接头' height="200"></center></td>
    </tr>
</table>


<h1 id="！！！重要！！！"><a href="#！！！重要！！！" class="headerlink" title="！！！重要！！！"></a>！！！重要！！！</h1><ul>
<li><strong>各模块共地接线</strong></li>
</ul>
]]></content>
      <categories>
        <category>救心来了 项目</category>
      </categories>
      <tags>
        <tag>救心来了 项目</tag>
      </tags>
  </entry>
  <entry>
    <title>“救心来了”项目硬件系统搭建（一）——硬件选型</title>
    <url>/2021/%E2%80%9C%E6%95%91%E5%BF%83%E6%9D%A5%E4%BA%86%E2%80%9D%E9%A1%B9%E7%9B%AE%E7%A1%AC%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E7%A1%AC%E4%BB%B6%E9%80%89%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="主控制器——Arduino-Uno"><a href="#主控制器——Arduino-Uno" class="headerlink" title="主控制器——Arduino Uno"></a>主控制器——Arduino Uno</h1><p>一开始之所以用Arduino做主控板，是因为比较简单（逃(￣▽￣)~），但是既然做了，就继续用下去吧，毕竟也是可以用的。后来者想用mega板也可以（程序是一样的，不要接错线就行了），但是uno已经可以完成目前所有功能。</p>
<ul>
<li>以后如果想优化，建议把主控板换成stm32，因为目前arduino对这个项目来说反应并不够快。</li>
</ul>
<span id="more"></span>
<div align=center><img src="https://gitee.com/atan2021/pic/raw/master/20210905_Arduino_UNO_R3.jpg" alt='Arduino UNO R3板载资源布局' width="500"/></div>

<h1 id="GPS模块——NEO-6M和加长天线"><a href="#GPS模块——NEO-6M和加长天线" class="headerlink" title="GPS模块——NEO-6M和加长天线"></a>GPS模块——NEO-6M和加长天线</h1><ul>
<li>GPS模块关心RX和TX就行了，VCC接电源5V，GND接地，用其它品牌的GPS也可以，接好这四个接口，有些GPS有时序接口什么的，这里没有用到。</li>
<li>GPS要在室外用，所以要接天线，如果本来就在室外的话，不接也可以。</li>
</ul>
<style>
table {margin-left: auto; margin-right: auto}
</style>

<table>
    <tr>
        <td ><center><img src="https://gitee.com/atan2021/pic/raw/master/20210905_GPS.jpg" alt='GPS模块' height="200"></center></td>
        <td ><center><img src="https://gitee.com/atan2021/pic/raw/master/20210905_GPStianxian.jpg"  alt='GPS天线' height="200"></center></td>
    </tr>
</table>

<h1 id="GSM模块——SIM900A"><a href="#GSM模块——SIM900A" class="headerlink" title="GSM模块——SIM900A"></a>GSM模块——SIM900A</h1><p>GSM模块有很多坑，在调试文档里详细说。本项目最好只用这个品牌GSM。</p>
<ul>
<li>GSM模块要搭建SIM卡使用，这种模块适用 移动4G 的SIM卡，大卡槽。然后用一张物联卡来调试就可以，当然，平常用的移动SIM卡也可以，卡里面要有流量。</li>
<li>本项目里GSM模块主要用于接收Arduino的指令，然后通过连接互联网，把指令发送到后台。</li>
<li>而对后台的数据处理，与微信连接的内容有疑问，请与<strong>汕头大学欧少闽老师</strong>联系。因为能力有限，本人只熟悉硬件的搭建和调试。</li>
</ul>
<div align=center><img src="https://gitee.com/atan2021/pic/raw/master/20210905_SIM900A.jpg" alt='SIM900A' width="400"/></div>

<h1 id="显示屏模块——1-77寸TFT显示屏"><a href="#显示屏模块——1-77寸TFT显示屏" class="headerlink" title="显示屏模块——1.77寸TFT显示屏"></a>显示屏模块——1.77寸TFT显示屏</h1><p>TFT显示屏主要用来GPS地址的显示，是没有什么用的（悄悄说）。调试什么的可以从电脑看。但是要专业一些，所以还是有一个显示屏吧。</p>
<ul>
<li>以后可以多加几个按钮，用来切换显示病人的状态，要是可触屏显示屏，用处就更大了，但是这时候不能用Arduino来控制。</li>
<li>接线前先焊好排线吧，本项目只用到tft模块的0-8接口。</li>
</ul>
<table>
    <tr>
        <td ><center><img src="https://gitee.com/atan2021/pic/raw/master/20210905_tft1.jpg" alt='TFT显示屏正面' width="200"></center></td>
        <td ><center><img src="https://gitee.com/atan2021/pic/raw/master/20210905_tft2.jpg"  alt='TFT显示屏反面' width="200"></center></td>
    </tr>
</table>

<h1 id="电源模块——18650锂电池（尖帽）4枚和电池盒"><a href="#电源模块——18650锂电池（尖帽）4枚和电池盒" class="headerlink" title="电源模块——18650锂电池（尖帽）4枚和电池盒"></a>电源模块——18650锂电池（尖帽）4枚和电池盒</h1><ul>
<li>不要反接电池。</li>
<li>用四个电池是可以提供足够的功率，因为GSM模块联网时很耗电。</li>
<li>电池盒要接<strong>稳压模块</strong>，电池长期不用时要拔出。</li>
<li>电池是多少毫安的没有关系。</li>
<li>如果有其它电池组，而不用本电池组，也可以，记得接稳压模块。</li>
</ul>
<table>
    <tr>
        <td ><center><img src="https://gitee.com/atan2021/pic/raw/master/20210905_dianchi2.jpg" alt='18650电池' height="200"></center></td>
        <td ><center><img src="https://gitee.com/atan2021/pic/raw/master/20210905_dianchihe2.jpg"  alt='18650电池盒 四节电池' height="200"></center></td>
    </tr>
</table>

<h1 id="稳压模块——3361AS车载电瓶DC5V稳压"><a href="#稳压模块——3361AS车载电瓶DC5V稳压" class="headerlink" title="稳压模块——3361AS车载电瓶DC5V稳压"></a>稳压模块——3361AS车载电瓶DC5V稳压</h1><ul>
<li>用这种稳压模块是因为，它真的很稳……，而<strong>GSM模块电压一旦有一点不稳，或者功率不够，它就会不工作</strong>，非常狗的。</li>
<li>上面有按钮，用起来很方便，但是电池盒连它时，正负极不要接错。</li>
<li>输出那边有USB的母头，我当时是把一条USB数据线剪了接上去的，然后一切用电就从数据线这边出来了。</li>
</ul>
<div align=center><img src="https://gitee.com/atan2021/pic/raw/master/20210905_3361AS.jpg" alt='3361AS稳压模块' width="300"/></div>

<h1 id="小零件"><a href="#小零件" class="headerlink" title="小零件"></a>小零件</h1><h2 id="LED小模块"><a href="#LED小模块" class="headerlink" title="LED小模块"></a>LED小模块</h2><ul>
<li>用一个集合的LED小模块，这种挺好玩的，没有的话，用普通LED+4.7k电阻也可以。</li>
<li>作为信号是否传输成功的查看器，从Arduino传输到GSM模块，会传输11条，闪11次（在程序里可修改），如果GSM联网成功的话，传输成功意味着发送求救信息成功。</li>
</ul>
<div align=center><img src="https://gitee.com/atan2021/pic/raw/master/20210905_LED.jpg" alt='LED' width="200"/></div>

<h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><ul>
<li>按钮，作为中断信号的发送器。</li>
</ul>
<div align=center><img src="https://gitee.com/atan2021/pic/raw/master/20210905_anniu.jpg" alt='按钮' width="200"/></div>]]></content>
      <categories>
        <category>救心来了 项目</category>
      </categories>
      <tags>
        <tag>救心来了 项目</tag>
      </tags>
  </entry>
</search>
